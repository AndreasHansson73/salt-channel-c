# Implementation details

## General

### Goals
**No dynamic memory allocation:**

This goal requires the API to be a little more complex than just reading writing. The application message have an overhead of 6 bytes (App message header + time). The encryption requires 16 bytes of authentication. This results in a overhead that requires that the application neglects the first 22 (SALT_READ_OVERHEAD_SIZE) bytes when reading an ecrypted message.

When writing a message, the TweetNaCl API requires the first 32 bytes of the message to be zero padded. Also the application message structure is included. This requires the application to neglect the first 38 (SALT_WRITE_OVERHEAD_SIZE) bytes of the clear text message when writing an encrypted message.

Further, when doing the handshake, this goal also requires the application to provice a buffer that is used during the handshake.

**Slow I/O:**
Do cryptographic computations during I/O. If the I/O is slow, some of the crypthographic computations can be calculated while waiting for I/O.

* Client sends the ehpemeral public encryption key in message M1.
* Host received the client key and immediately sends the host key in message M2.
* While I/O, calculate the ephemeral key. Immediately after this, start calculating the signature used for M3.
* Client received the host key and immediately starts calculating this. This can be done while the M3 message is received from the host. Directly after this, the client starts calculating the signature used for M4.
* Client receives M3 and the host signature. If the signature is valid and the host can be authenticated, the clients send the M4 message containing the clients signature.

### TweetNaCl API
**Encryption:**
API: https://nacl.cr.yp.to/box.html
crypto_box_afternm requires the first 32 (crypto_secretbox_ZEROBYTES) bytes to be zero (0x00) padded. After encryption the first 16 (crypto_secretbox_BOXZEROBYTES) will be zero (0x00). This is how an encrypted message is wrapped:
```
--> User input                   --> { neglectedData[38] , clearTextMessage[N] }
--> wrap as application message  --> { zeroPadded[32] , appMsgHeader[2] , time[4] , clearTextMessage[N] }
--> Encrypt wrapped message      --> { zeroPadded[16] , authBytes[16] , cipherMessage[N+6] }
Then, the zero padded bytes are neglected and the size bytes are added:
--> Add encrypted pkg, add size --> { sizeBytes[4] , encryptedMsgHeader[2] , authBytes[16] , cipherMessage[N+6] }
```

Actual send data size: N + 24    --> { sizeBytes[4] , encryptedMsgHeader[2] encryptedBody[N+22] }

**Decryption:**
crypto_box_open_afternm requires the first 16 bytes to be zero (0x00) padded. After decryption the first 32 bytes will be zero.
```
--> Input from I/O               --> { sizeBytes[4] } = N
--> Input from I/O               --> { zeroBytes[14] , encryptedMsgHeader[2] , encryptedBody[N-2] }
--> unrwap encrypted message     --> { zeroBytes[16] , authBytes[16] , cipherMessage[N-2-16] }
--> decrypt message              --> { zeroBytes[32] , appMsgHeader[2] , time[4] , clearTextMessage[N-2-16-2-4] }
--> Message to application       --> { neglectedData[38] , clearTextMessage[N-2-16-2-4] }
```

Both the crypto_box_afternm and the crypto_box_open_afternm methods allows to perform the cryptographic operations directly on the buffers. I.e., there is no requirement for a temporary buffer.


**Hashing:**
API: https://nacl.cr.yp.to/hash.html
sha512 is used for hashing and the size of a hash is 64 bytes. If the message to hash is larger than 64 bytes, the API allows for putting the hash where the original message was. I.e.: We don't need a specific storage for the hash, if we dont want to save the original message.

**Signing:**
API: https://nacl.cr.yp.to/sign.html
The TweetNaCl API doesn't allow to only generate a signature (64 bytes) or verify a message with the signature separated from the message.

### Message details

**M1**
The size of M1 varies depending if the client tries to connect to a virtual host and if a resume
tickes is included. At this point, we don't handle resume ticket, but we handle server sig key
included if the key is the same as the ONLY host sig key we have.

```
No ticket, no server sig key:   4 + 2 + 4 + 32                  = 42 Bytes
Server sig key included:        4 + 2 + 4 + 32                  = 76 Bytes
Ticket, no server sig key:      4 + 2 + 4 + 1 + (0-127)         =  Max: 43 + 127 = 170 Bytes
Ticket, server sig key:         4 + 2 + 4 + 1 + 32 + (0-127)    = Max: 77+127    = 204 Bytes
```

**M2**
The size of M2 should be 2 + 4 + 32 bytes. However, if the sig key included in M1 is not valid
the session is considered closed.
```
    Valid M1 message:               2 + 4 + 32                      = 38 Bytes
    Invalid M1 message:             2 + 4 + ?                       = ?  Bytes
```

**M3**
The size of M3 is always constant.
```
    M3 size:                        2 + 4 + 32 + 64                 = 102 Bytes
    M3 encrypted size:              2 + 16 + 102                    = 120 Bytes
```

**M4**
The size of M4 is always constant.
```
    M4 size:                        2 + 4 + 32 + 64                 = 102 Bytes
    M4 encrypted size:              2 + 16 + 102                    = 120 Bytes
```

### Server handshaking procedure

A handshake buffer hdshk_buffer[SALT_HNDSHK_BUFFER_SIZE] is provided by the application.

1. Host reads M1, starting at hdshk_buffer[64]. We start at 64 due to the crypto_sign_open operation after M4 is received. The crypto_sign_operation requires the signed message to have the structure:
```
signed_msg[n+64] = { sig[64] , msg[n] }
n = 128 ( hashM1[64 + hashM2[64 ]])
```
2. Host verifies the M1 structure and calculates the hash of M1 and put it into
    hdshk_buffer[64:127]
3. Host creates M2 into hdshk_buffer[192:m2Size], calculates the hash of M2 and put it into
    hdshk_buffer[128:191]. The hashes of M1 and M2 are used to verify the signature of the M4 message received by the client.
4. Host starts sending the M2 message. If the I/O is slow, the host starts calculating the common encryption keypair used for the session.
5. M2 I/O is done, the host now creates the M3 message. This message is encrypted and requires 32 bytes zero padding before the message. We can't touch the hashes of M1 and M2 since we need them to verify the M4 message. There fore we create M4 right after hdshk_buffer[192+32]. Process:
```
hdshk_buffer[64:191] = { m1Hash[64] , m2Hash[64] }
Create M3 32 bytes after hdshk_buffer[192]. The size of M3 is 102 bytes. The crypto_sign operation also adds the original after the signature. Therefore, we create the signature at hdshk_buffer[0]. This will create hdshk_buffer:
hdshk_buffer[0:191] = { sig[64] , m1Hash[64] , m2Hash[64] }
Then copy sig[64] to M3.
hdshk_buffer[160:262] = { M3[102] } = { header[2] , time[4] , serverPubSigKey[32] , sig[64] }
salti_write will encrypt the message and send the encrypted package header and the size bytes.
```
6. M3 I/O is done.
7. Read M4 into hdshk_buffer[192]. Process:
```
hdshk_buffer[192] = { zeroPadded[16] , encryptedM4[120] }
decrypt:
hdshk_buffer[192] = { zeroPadded[32] , clearM4[102] } = { header[2] , time[4] , clientPubSigKey[32] , sig[64] }
copy signature to hdshk_buffer[0:63]. We now have the following signed message:
signed_msg = hdshk_buffer[0:191] = { sig[64] , m1Hash[64] , m2Hash[64] }.
Open the signed message into
hdshk_buffer[192:384] = { m1Hash[64] , m2Hash[64] , neglected[64] }
Due to this, the length of hdshk_buffer for the SERVER must be at least 384 bytes long.
```
8. If the sign verification succeeds, the handshake is done.

### Client handshaking procedure

A handshake buffer hdshk_buffer[SALT_HNDSHK_BUFFER_SIZE] is provided by the application.

1. Client creates M1 into hdshk_buffer[128] and calculates the hash into hdshk_buffer[64]. We now have:
```
hdshk_buffer[0:128+m1Size] = { neglected[64] , m1Hash[64] , m1[m1Size] }
```
2. The server will always receive M1 before sending M2. Now we receive M2 into hdshk_buffer[128] and put the hash into hdshk_buffer[64:127]. We now have:
```
hdshk_buffer[0:192] = { neglected[64] , m1Hash[64] , m2hash[64] }
```
3. Client calculates the common ephemeral encryption key.
4. Client creates M4
The client may calculate M4 while the server is sending M3. We need to keep M4 intact while verifying M4. When verifying M3 the TweetNaCl requires a buffer to put the unsigned message in. That buffer must have the same size as the message to verify. We have:
```
hdshk_buffer = { neglected[64] , m1Hash[64] , m2Hash[64] , reservedForM3[192] , reservedForM4[102] }
This results that the handshake buffer for the client must be 192 + 192 + 102 = 486 bytes large.
```
3. Client received M3 into hdshk_buffer[192]:
```
hdshk_buffer[192:312] = { zeroPadded[32] , header[2] , time[4] , clientPubSigKey[32] , sig[64] }
copy signature to hdshk_buffer[0:63]. We now have the following signed message:
signed_msg = hdshk_buffer[0:191] = { sig[64] , m1Hash[64] , m2Hash[64] }.
Open the signed message into
hdshk_buffer[192:384] = { m1Hash[64] , m2Hash[64] , neglected[64] }
```
4. If signature was OK, clients sends the M4 message. Which is encrypted.
5. Handshake done